{"ast":null,"code":"import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, NgZone, ChangeDetectorRef, Input, ContentChild, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { animation, style, animate, trigger, transition, useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { ConfirmationService, Footer, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ButtonModule } from 'primeng/button';\nconst showAnimation = animation([style({\n  transform: '{{transform}}',\n  opacity: 0\n}), animate('{{transition}}', style({\n  transform: 'none',\n  opacity: 1\n}))]);\nconst hideAnimation = animation([animate('{{transition}}', style({\n  transform: '{{transform}}',\n  opacity: 0\n}))]);\nclass ConfirmDialog {\n  constructor(el, renderer, confirmationService, zone, cd) {\n    this.el = el;\n    this.renderer = renderer;\n    this.confirmationService = confirmationService;\n    this.zone = zone;\n    this.cd = cd;\n    this.acceptIcon = 'pi pi-check';\n    this.acceptLabel = 'Yes';\n    this.acceptVisible = true;\n    this.rejectIcon = 'pi pi-times';\n    this.rejectLabel = 'No';\n    this.rejectVisible = true;\n    this.closeOnEscape = true;\n    this.blockScroll = true;\n    this.closable = true;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)';\n    this.focusTrap = true;\n    this.defaultFocus = 'accept';\n    this._position = \"center\";\n    this.transformOptions = \"scale(0.7)\";\n    this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n      if (!confirmation) {\n        this.hide();\n        return;\n      }\n      if (confirmation.key === this.key) {\n        this.confirmation = confirmation;\n        this.confirmationOptions = {\n          message: this.confirmation.message || this.message,\n          icon: this.confirmation.icon || this.icon,\n          header: this.confirmation.header || this.header,\n          rejectVisible: this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible,\n          acceptVisible: this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible,\n          acceptLabel: this.confirmation.acceptLabel || this.acceptLabel,\n          rejectLabel: this.confirmation.rejectLabel || this.rejectLabel,\n          acceptIcon: this.confirmation.acceptIcon || this.acceptIcon,\n          rejectIcon: this.confirmation.rejectIcon || this.rejectIcon,\n          acceptButtonStyleClass: this.confirmation.acceptButtonStyleClass || this.acceptButtonStyleClass,\n          rejectButtonStyleClass: this.confirmation.rejectButtonStyleClass || this.rejectButtonStyleClass,\n          defaultFocus: this.confirmation.defaultFocus || this.defaultFocus,\n          blockScroll: this.confirmation.blockScroll === false || this.confirmation.blockScroll === true ? this.confirmation.blockScroll : this.blockScroll\n        };\n        if (this.confirmation.accept) {\n          this.confirmation.acceptEvent = new EventEmitter();\n          this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n        }\n        if (this.confirmation.reject) {\n          this.confirmation.rejectEvent = new EventEmitter();\n          this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n        }\n        this.visible = true;\n      }\n    });\n  }\n  get visible() {\n    return this._visible;\n  }\n  set visible(value) {\n    this._visible = value;\n    if (this._visible && !this.maskVisible) {\n      this.maskVisible = true;\n    }\n    this.cd.markForCheck();\n  }\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position = value;\n    switch (value) {\n      case 'topleft':\n      case 'bottomleft':\n      case 'left':\n        this.transformOptions = \"translate3d(-100%, 0px, 0px)\";\n        break;\n      case 'topright':\n      case 'bottomright':\n      case 'right':\n        this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n        break;\n      case 'bottom':\n        this.transformOptions = \"translate3d(0px, 100%, 0px)\";\n        break;\n      case 'top':\n        this.transformOptions = \"translate3d(0px, -100%, 0px)\";\n        break;\n      default:\n        this.transformOptions = \"scale(0.7)\";\n        break;\n    }\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'footerTemplate':\n          this.footerTemplate = item.template;\n          break;\n      }\n    });\n  }\n  option(name) {\n    const source = this.confirmationOptions || this;\n    if (source.hasOwnProperty(name)) {\n      return source[name];\n    }\n    return undefined;\n  }\n  onAnimationStart(event) {\n    switch (event.toState) {\n      case 'visible':\n        this.container = event.element;\n        this.wrapper = this.container.parentElement;\n        this.contentContainer = DomHandler.findSingle(this.container, '.p-dialog-content');\n        const element = this.getElementToFocus();\n        if (element) {\n          element.focus();\n        }\n        this.appendContainer();\n        this.moveOnTop();\n        this.bindGlobalListeners();\n        this.enableModality();\n        break;\n    }\n  }\n  onAnimationEnd(event) {\n    switch (event.toState) {\n      case 'void':\n        this.onOverlayHide();\n        break;\n    }\n  }\n  getElementToFocus() {\n    switch (this.option('defaultFocus')) {\n      case 'accept':\n        return DomHandler.findSingle(this.container, '.p-confirm-dialog-accept');\n      case 'reject':\n        return DomHandler.findSingle(this.container, '.p-confirm-dialog-reject');\n      case 'close':\n        return DomHandler.findSingle(this.container, '.p-dialog-header-close');\n      case 'none':\n        return null;\n      //backward compatibility\n      default:\n        return DomHandler.findSingle(this.container, '.p-confirm-dialog-accept');\n    }\n  }\n  appendContainer() {\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.wrapper);else DomHandler.appendChild(this.wrapper, this.appendTo);\n    }\n  }\n  restoreAppend() {\n    if (this.wrapper && this.appendTo) {\n      this.el.nativeElement.appendChild(this.wrapper);\n    }\n  }\n  enableModality() {\n    if (this.option('blockScroll')) {\n      DomHandler.addClass(document.body, 'p-overflow-hidden');\n    }\n  }\n  disableModality() {\n    this.maskVisible = false;\n    if (this.option('blockScroll')) {\n      DomHandler.removeClass(document.body, 'p-overflow-hidden');\n    }\n    if (this.container) {\n      this.cd.detectChanges();\n    }\n  }\n  close(event) {\n    if (this.confirmation.rejectEvent) {\n      this.confirmation.rejectEvent.emit();\n    }\n    this.hide();\n    event.preventDefault();\n  }\n  hide() {\n    this.visible = false;\n    this.confirmation = null;\n    this.confirmationOptions = null;\n  }\n  moveOnTop() {\n    if (this.autoZIndex) {\n      this.container.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n      this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n    }\n  }\n  getMaskClass() {\n    let maskClass = {\n      'p-dialog-mask p-component-overlay': true,\n      'p-dialog-mask-scrollblocker': this.blockScroll\n    };\n    maskClass[this.getPositionClass().toString()] = true;\n    return maskClass;\n  }\n  getPositionClass() {\n    const positions = ['left', 'right', 'top', 'topleft', 'topright', 'bottom', 'bottomleft', 'bottomright'];\n    const pos = positions.find(item => item === this.position);\n    return pos ? `p-dialog-${pos}` : '';\n  }\n  bindGlobalListeners() {\n    if (this.closeOnEscape && this.closable || this.focusTrap && !this.documentEscapeListener) {\n      const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n      this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', event => {\n        if (event.which == 27 && this.closeOnEscape && this.closable) {\n          if (parseInt(this.container.style.zIndex) === DomHandler.zindex + this.baseZIndex && this.visible) {\n            this.close(event);\n          }\n        }\n        if (event.which === 9 && this.focusTrap) {\n          event.preventDefault();\n          let focusableElements = DomHandler.getFocusableElements(this.container);\n          if (focusableElements && focusableElements.length > 0) {\n            if (!focusableElements[0].ownerDocument.activeElement) {\n              focusableElements[0].focus();\n            } else {\n              let focusedIndex = focusableElements.indexOf(focusableElements[0].ownerDocument.activeElement);\n              if (event.shiftKey) {\n                if (focusedIndex == -1 || focusedIndex === 0) focusableElements[focusableElements.length - 1].focus();else focusableElements[focusedIndex - 1].focus();\n              } else {\n                if (focusedIndex == -1 || focusedIndex === focusableElements.length - 1) focusableElements[0].focus();else focusableElements[focusedIndex + 1].focus();\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  unbindGlobalListeners() {\n    if (this.documentEscapeListener) {\n      this.documentEscapeListener();\n      this.documentEscapeListener = null;\n    }\n  }\n  onOverlayHide() {\n    this.disableModality();\n    this.unbindGlobalListeners();\n    this.container = null;\n  }\n  ngOnDestroy() {\n    this.restoreAppend();\n    this.onOverlayHide();\n    this.subscription.unsubscribe();\n  }\n  accept() {\n    if (this.confirmation.acceptEvent) {\n      this.confirmation.acceptEvent.emit();\n    }\n    this.hide();\n  }\n  reject() {\n    if (this.confirmation.rejectEvent) {\n      this.confirmation.rejectEvent.emit();\n    }\n    this.hide();\n  }\n}\nclass ConfirmDialogModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConfirmDialog, ConfirmDialogModule };\n//# sourceMappingURL=primeng-confirmdialog.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}