{"ast":null,"code":"import { ɵɵdefineInjectable, Injectable, Component, Directive, TemplateRef, Input, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nlet PrimeNGConfig = /*#__PURE__*/(() => {\n  class PrimeNGConfig {\n    constructor() {\n      this.ripple = false;\n    }\n  }\n  PrimeNGConfig.ɵprov = ɵɵdefineInjectable({\n    factory: function PrimeNGConfig_Factory() {\n      return new PrimeNGConfig();\n    },\n    token: PrimeNGConfig,\n    providedIn: \"root\"\n  });\n  return PrimeNGConfig;\n})();\nclass ConfirmationService {\n  constructor() {\n    this.requireConfirmationSource = new Subject();\n    this.acceptConfirmationSource = new Subject();\n    this.requireConfirmation$ = this.requireConfirmationSource.asObservable();\n    this.accept = this.acceptConfirmationSource.asObservable();\n  }\n  confirm(confirmation) {\n    this.requireConfirmationSource.next(confirmation);\n    return this;\n  }\n  close() {\n    this.requireConfirmationSource.next(null);\n    return this;\n  }\n  onAccept() {\n    this.acceptConfirmationSource.next();\n  }\n}\nclass MessageService {\n  constructor() {\n    this.messageSource = new Subject();\n    this.clearSource = new Subject();\n    this.messageObserver = this.messageSource.asObservable();\n    this.clearObserver = this.clearSource.asObservable();\n  }\n  add(message) {\n    if (message) {\n      this.messageSource.next(message);\n    }\n  }\n  addAll(messages) {\n    if (messages && messages.length) {\n      this.messageSource.next(messages);\n    }\n  }\n  clear(key) {\n    this.clearSource.next(key || null);\n  }\n}\nclass Header {}\nclass Footer {}\nclass PrimeTemplate {\n  constructor(template) {\n    this.template = template;\n  }\n  getType() {\n    return this.name;\n  }\n}\nclass SharedModule {}\nclass TreeDragDropService {\n  constructor() {\n    this.dragStartSource = new Subject();\n    this.dragStopSource = new Subject();\n    this.dragStart$ = this.dragStartSource.asObservable();\n    this.dragStop$ = this.dragStopSource.asObservable();\n  }\n  startDrag(event) {\n    this.dragStartSource.next(event);\n  }\n  stopDrag(event) {\n    this.dragStopSource.next(event);\n  }\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConfirmationService, Footer, Header, MessageService, PrimeNGConfig, PrimeTemplate, SharedModule, TreeDragDropService };\n//# sourceMappingURL=primeng-api.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}