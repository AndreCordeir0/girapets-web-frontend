{"ast":null,"code":"import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, ElementRef, ChangeDetectorRef, Input, ContentChildren, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { MessageService, PrimeTemplate } from 'primeng/api';\nimport { RippleModule } from 'primeng/ripple';\nclass Messages {\n  constructor(messageService, el, cd) {\n    this.messageService = messageService;\n    this.el = el;\n    this.cd = cd;\n    this.closable = true;\n    this.enableService = true;\n    this.escape = true;\n    this.showTransitionOptions = '300ms ease-out';\n    this.hideTransitionOptions = '200ms cubic-bezier(0.86, 0, 0.07, 1)';\n    this.valueChange = new EventEmitter();\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'content':\n          this.contentTemplate = item.template;\n          break;\n        default:\n          this.contentTemplate = item.template;\n          break;\n      }\n    });\n    if (this.messageService && this.enableService && !this.contentTemplate) {\n      this.messageSubscription = this.messageService.messageObserver.subscribe(messages => {\n        if (messages) {\n          if (messages instanceof Array) {\n            let filteredMessages = messages.filter(m => this.key === m.key);\n            this.value = this.value ? [...this.value, ...filteredMessages] : [...filteredMessages];\n          } else if (this.key === messages.key) {\n            this.value = this.value ? [...this.value, ...[messages]] : [messages];\n          }\n          this.cd.markForCheck();\n        }\n      });\n      this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n        if (key) {\n          if (this.key === key) {\n            this.value = null;\n          }\n        } else {\n          this.value = null;\n        }\n        this.cd.markForCheck();\n      });\n    }\n  }\n  hasMessages() {\n    let parentEl = this.el.nativeElement.parentElement;\n    if (parentEl && parentEl.offsetParent) {\n      return this.contentTemplate != null || this.value && this.value.length > 0;\n    }\n    return false;\n  }\n  clear() {\n    this.value = [];\n    this.valueChange.emit(this.value);\n  }\n  removeMessage(i) {\n    this.value = this.value.filter((msg, index) => index !== i);\n  }\n  get icon() {\n    const severity = this.severity || (this.hasMessages() ? this.value[0].severity : null);\n    if (this.hasMessages()) {\n      switch (severity) {\n        case 'success':\n          return 'pi-check';\n          break;\n        case 'info':\n          return 'pi-info-circle';\n          break;\n        case 'error':\n          return 'pi-times';\n          break;\n        case 'warn':\n          return 'pi-exclamation-triangle';\n          break;\n        default:\n          return 'pi-info-circle';\n          break;\n      }\n    }\n    return null;\n  }\n  ngOnDestroy() {\n    if (this.messageSubscription) {\n      this.messageSubscription.unsubscribe();\n    }\n    if (this.clearSubscription) {\n      this.clearSubscription.unsubscribe();\n    }\n  }\n}\nclass MessagesModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messages, MessagesModule };\n//# sourceMappingURL=primeng-messages.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}