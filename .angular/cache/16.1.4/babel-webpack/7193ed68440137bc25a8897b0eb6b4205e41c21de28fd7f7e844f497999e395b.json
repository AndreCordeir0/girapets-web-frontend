{"ast":null,"code":"import { Directive, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ComponentFactoryResolver, ChangeDetectorRef, Renderer2, NgZone, ViewChild, NgModule, Injectable, ApplicationRef, Injector } from '@angular/core';\nimport { animation, style, animate, trigger, transition, useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { Subject } from 'rxjs';\nclass DynamicDialogContent {\n  constructor(viewContainerRef) {\n    this.viewContainerRef = viewContainerRef;\n  }\n}\nclass DynamicDialogConfig {}\nclass DynamicDialogRef {\n  constructor() {\n    this._onClose = new Subject();\n    this.onClose = this._onClose.asObservable();\n    this._onDestroy = new Subject();\n    this.onDestroy = this._onDestroy.asObservable();\n  }\n  close(result) {\n    this._onClose.next(result);\n  }\n  destroy() {\n    this._onDestroy.next();\n  }\n}\nconst showAnimation = animation([style({\n  transform: '{{transform}}',\n  opacity: 0\n}), animate('{{transition}}', style({\n  transform: 'none',\n  opacity: 1\n}))]);\nconst hideAnimation = animation([animate('{{transition}}', style({\n  transform: '{{transform}}',\n  opacity: 0\n}))]);\nclass DynamicDialogComponent {\n  constructor(componentFactoryResolver, cd, renderer, config, dialogRef, zone) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.cd = cd;\n    this.renderer = renderer;\n    this.config = config;\n    this.dialogRef = dialogRef;\n    this.zone = zone;\n    this.visible = true;\n    this.transformOptions = \"scale(0.7)\";\n  }\n  ngAfterViewInit() {\n    this.loadChildComponent(this.childComponentType);\n    this.cd.detectChanges();\n  }\n  loadChildComponent(componentType) {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n    let viewContainerRef = this.insertionPoint.viewContainerRef;\n    viewContainerRef.clear();\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\n  }\n  moveOnTop() {\n    if (this.config.autoZIndex !== false) {\n      const zIndex = (this.config.baseZIndex || 0) + ++DomHandler.zindex;\n      this.container.style.zIndex = String(zIndex);\n      this.maskViewChild.nativeElement.style.zIndex = String(zIndex - 1);\n    }\n  }\n  onAnimationStart(event) {\n    switch (event.toState) {\n      case 'visible':\n        this.container = event.element;\n        this.wrapper = this.container.parentElement;\n        this.moveOnTop();\n        this.bindGlobalListeners();\n        if (this.config.modal !== false) {\n          this.enableModality();\n        }\n        this.focus();\n        break;\n      case 'void':\n        this.onContainerDestroy();\n        break;\n    }\n  }\n  onAnimationEnd(event) {\n    if (event.toState === 'void') {\n      this.dialogRef.destroy();\n    }\n  }\n  onContainerDestroy() {\n    this.unbindGlobalListeners();\n    if (this.config.modal !== false) {\n      this.disableModality();\n    }\n    this.container = null;\n  }\n  close() {\n    this.visible = false;\n    this.cd.markForCheck();\n  }\n  hide() {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n    }\n  }\n  enableModality() {\n    if (this.config.closable !== false && this.config.dismissableMask) {\n      this.maskClickListener = this.renderer.listen(this.wrapper, 'click', event => {\n        if (this.wrapper && this.wrapper.isSameNode(event.target)) {\n          this.hide();\n        }\n      });\n    }\n    if (this.config.modal !== false) {\n      DomHandler.addClass(document.body, 'p-overflow-hidden');\n    }\n  }\n  disableModality() {\n    if (this.wrapper) {\n      if (this.config.dismissableMask) {\n        this.unbindMaskClickListener();\n      }\n      if (this.config.modal !== false) {\n        DomHandler.removeClass(document.body, 'p-overflow-hidden');\n      }\n      if (!this.cd.destroyed) {\n        this.cd.detectChanges();\n      }\n    }\n  }\n  onKeydown(event) {\n    if (event.which === 9) {\n      event.preventDefault();\n      let focusableElements = DomHandler.getFocusableElements(this.container);\n      if (focusableElements && focusableElements.length > 0) {\n        if (!focusableElements[0].ownerDocument.activeElement) {\n          focusableElements[0].focus();\n        } else {\n          let focusedIndex = focusableElements.indexOf(focusableElements[0].ownerDocument.activeElement);\n          if (event.shiftKey) {\n            if (focusedIndex == -1 || focusedIndex === 0) focusableElements[focusableElements.length - 1].focus();else focusableElements[focusedIndex - 1].focus();\n          } else {\n            if (focusedIndex == -1 || focusedIndex === focusableElements.length - 1) focusableElements[0].focus();else focusableElements[focusedIndex + 1].focus();\n          }\n        }\n      }\n    }\n  }\n  focus() {\n    let focusable = DomHandler.findSingle(this.container, '[autofocus]');\n    if (focusable) {\n      this.zone.runOutsideAngular(() => {\n        setTimeout(() => focusable.focus(), 5);\n      });\n    }\n  }\n  bindGlobalListeners() {\n    this.bindDocumentKeydownListener();\n    if (this.config.closeOnEscape !== false && this.config.closable !== false) {\n      this.bindDocumentEscapeListener();\n    }\n  }\n  unbindGlobalListeners() {\n    this.unbindDocumentKeydownListener();\n    this.unbindDocumentEscapeListener();\n  }\n  bindDocumentKeydownListener() {\n    this.zone.runOutsideAngular(() => {\n      this.documentKeydownListener = this.onKeydown.bind(this);\n      window.document.addEventListener('keydown', this.documentKeydownListener);\n    });\n  }\n  unbindDocumentKeydownListener() {\n    if (this.documentKeydownListener) {\n      window.document.removeEventListener('keydown', this.documentKeydownListener);\n      this.documentKeydownListener = null;\n    }\n  }\n  bindDocumentEscapeListener() {\n    const documentTarget = this.maskViewChild ? this.maskViewChild.nativeElement.ownerDocument : 'document';\n    this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', event => {\n      if (event.which == 27) {\n        if (parseInt(this.container.style.zIndex) == DomHandler.zindex + (this.config.baseZIndex ? this.config.baseZIndex : 0)) {\n          this.hide();\n        }\n      }\n    });\n  }\n  unbindDocumentEscapeListener() {\n    if (this.documentEscapeListener) {\n      this.documentEscapeListener();\n      this.documentEscapeListener = null;\n    }\n  }\n  unbindMaskClickListener() {\n    if (this.maskClickListener) {\n      this.maskClickListener();\n      this.maskClickListener = null;\n    }\n  }\n  ngOnDestroy() {\n    this.onContainerDestroy();\n    if (this.componentRef) {\n      this.componentRef.destroy();\n    }\n  }\n}\nclass DynamicDialogModule {}\nclass DynamicDialogInjector {\n  constructor(_parentInjector, _additionalTokens) {\n    this._parentInjector = _parentInjector;\n    this._additionalTokens = _additionalTokens;\n  }\n  get(token, notFoundValue, flags) {\n    const value = this._additionalTokens.get(token);\n    if (value) return value;\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\nclass DialogService {\n  constructor(componentFactoryResolver, appRef, injector) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.appRef = appRef;\n    this.injector = injector;\n    this.dialogComponentRefMap = new Map();\n  }\n  open(componentType, config) {\n    const dialogRef = this.appendDialogComponentToBody(config);\n    this.dialogComponentRefMap.get(dialogRef).instance.childComponentType = componentType;\n    return dialogRef;\n  }\n  appendDialogComponentToBody(config) {\n    const map = new WeakMap();\n    map.set(DynamicDialogConfig, config);\n    const dialogRef = new DynamicDialogRef();\n    map.set(DynamicDialogRef, dialogRef);\n    const sub = dialogRef.onClose.subscribe(() => {\n      this.dialogComponentRefMap.get(dialogRef).instance.close();\n    });\n    const destroySub = dialogRef.onDestroy.subscribe(() => {\n      this.removeDialogComponentFromBody(dialogRef);\n      destroySub.unsubscribe();\n      sub.unsubscribe();\n    });\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(DynamicDialogComponent);\n    const componentRef = componentFactory.create(new DynamicDialogInjector(this.injector, map));\n    this.appRef.attachView(componentRef.hostView);\n    const domElem = componentRef.hostView.rootNodes[0];\n    document.body.appendChild(domElem);\n    this.dialogComponentRefMap.set(dialogRef, componentRef);\n    return dialogRef;\n  }\n  removeDialogComponentFromBody(dialogRef) {\n    if (!dialogRef || !this.dialogComponentRefMap.has(dialogRef)) {\n      return;\n    }\n    const dialogComponentRef = this.dialogComponentRefMap.get(dialogRef);\n    this.appRef.detachView(dialogComponentRef.hostView);\n    dialogComponentRef.destroy();\n    this.dialogComponentRefMap.delete(dialogRef);\n  }\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DialogService, DynamicDialogComponent, DynamicDialogConfig, DynamicDialogInjector, DynamicDialogModule, DynamicDialogRef, DynamicDialogContent as Éµa };\n//# sourceMappingURL=primeng-dynamicdialog.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}