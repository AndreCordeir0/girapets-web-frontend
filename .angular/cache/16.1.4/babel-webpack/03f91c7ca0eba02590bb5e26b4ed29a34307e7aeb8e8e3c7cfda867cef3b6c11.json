{"ast":null,"code":"import { environment } from './../../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nlet AnimaisService = /*#__PURE__*/(() => {\n  class AnimaisService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.apiUrl = environment.apiURL;\n      this.headers = this.authService.getAuthorizationHeader();\n      // private API_ANIMAL = 'http://localhost:8080/api/animais';\n      this.atributosAnimal = new BehaviorSubject(null);\n    }\n    // Pega como parâmetro dados vindo do objeto no HTML e passa pra variavel criando um novo objeto apenas do animal selecionado.\n    setAtributos(id, nome, sexo, descricao, especie, raca, idade, cidade, imagens) {\n      this.nomeAnimal = nome;\n      const animalObj = {\n        id: id,\n        nome: this.nomeAnimal,\n        sexo: sexo,\n        descricao: descricao,\n        especie: especie,\n        raca: raca,\n        idade: idade,\n        cidade: cidade,\n        imagens: imagens\n      };\n      this.atributosAnimal.next(animalObj);\n      return animalObj;\n    }\n    // Retorna o nome do animal\n    getNomeAnimal() {\n      return this.nomeAnimal;\n    }\n    // Retorna os dados do animal selecionado na modal\n    getAtributos() {\n      return this.atributosAnimal.asObservable();\n    }\n    // Código com a API de localhost e Token de autenticação\n    listarAnimais() {\n      return this.http.get(`${this.apiUrl}/animais`);\n    }\n    adicionarAnimal(formData) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.post(`${this.apiUrl}/animais`, formData, {\n        headers\n      });\n    }\n    recuperarPorId(id) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.get(`${this.apiUrl}/animais/${id}`, {\n        headers\n      });\n    }\n    removerAnimal(id) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.delete(`${this.apiUrl}/animais/${id}`, {\n        headers\n      });\n    }\n    fazerUploadImagens(formData) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.post(`${this.apiUrl}/imagens`, formData, {\n        headers\n      });\n    }\n    listarImagens(id) {\n      return this.http.get(`${this.apiUrl}/imagens/${id}`);\n    }\n    editarAnimal(formData, id) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.put(`${this.apiUrl}/animais/${id}`, formData, {\n        headers\n      });\n    }\n    editarImagens(formData, id) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.put(`${this.apiUrl}/imagens/${id}`, formData, {\n        headers\n      });\n    }\n    excluirImagem(id) {\n      const headers = this.authService.getAuthorizationHeader();\n      return this.http.delete(`${this.apiUrl}/imagens/${id}`, {\n        headers\n      });\n    }\n  }\n  AnimaisService.ɵfac = function AnimaisService_Factory(t) {\n    return new (t || AnimaisService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  AnimaisService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AnimaisService,\n    factory: AnimaisService.ɵfac,\n    providedIn: 'root'\n  });\n  return AnimaisService;\n})();\nexport { AnimaisService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}