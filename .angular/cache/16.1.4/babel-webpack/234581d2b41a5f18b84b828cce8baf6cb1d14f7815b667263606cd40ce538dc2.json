{"ast":null,"code":"import _defineProperty from \"C:/Users/Henrique/Desktop/girapets-web/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { PrimeTemplate } from 'primeng/api';\nimport * as i2 from 'primeng/button';\nimport { ButtonModule } from 'primeng/button';\nimport { ChevronDownIcon } from 'primeng/icons/chevrondown';\nimport * as i3 from 'primeng/tieredmenu';\nimport { TieredMenuModule } from 'primeng/tieredmenu';\n\n/**\n * SplitButton groups a set of commands in an overlay with a default command.\n * @group Components\n */\nconst _c0 = [\"container\"];\nconst _c1 = [\"defaultbtn\"];\nconst _c2 = [\"menu\"];\nfunction SplitButton_ng_container_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction SplitButton_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function SplitButton_ng_container_2_Template_button_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onDefaultButtonClick($event));\n    });\n    i0.ɵɵtemplate(2, SplitButton_ng_container_2_ng_container_2_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r1.icon)(\"iconPos\", ctx_r1.iconPos)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵattribute(\"tabindex\", ctx_r1.tabindex);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.contentTemplate);\n  }\n}\nfunction SplitButton_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10, 11);\n    i0.ɵɵlistener(\"click\", function SplitButton_ng_template_3_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onDefaultButtonClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"icon\", ctx_r3.icon)(\"iconPos\", ctx_r3.iconPos)(\"label\", ctx_r3.label)(\"disabled\", ctx_r3.disabled);\n    i0.ɵɵattribute(\"tabindex\", ctx_r3.tabindex);\n  }\n}\nfunction SplitButton_ChevronDownIcon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ChevronDownIcon\");\n  }\n}\nfunction SplitButton_7_ng_template_0_Template(rf, ctx) {}\nfunction SplitButton_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SplitButton_7_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nlet SplitButton = /*#__PURE__*/(() => {\n  class SplitButton {\n    constructor() {\n      /**\n       * MenuModel instance to define the overlay items.\n       * @group Props\n       */\n      _defineProperty(this, \"model\", void 0);\n      /**\n       * Name of the icon.\n       * @group Props\n       */\n      _defineProperty(this, \"icon\", void 0);\n      /**\n       * Position of the icon.\n       * @group Props\n       */\n      _defineProperty(this, \"iconPos\", 'left');\n      /**\n       * Text of the button.\n       * @group Props\n       */\n      _defineProperty(this, \"label\", void 0);\n      /**\n       * Inline style of the element.\n       * @group Props\n       */\n      _defineProperty(this, \"style\", void 0);\n      /**\n       * Class of the element.\n       * @group Props\n       */\n      _defineProperty(this, \"styleClass\", void 0);\n      /**\n       * Inline style of the overlay menu.\n       * @group Props\n       */\n      _defineProperty(this, \"menuStyle\", void 0);\n      /**\n       * Style class of the overlay menu.\n       * @group Props\n       */\n      _defineProperty(this, \"menuStyleClass\", void 0);\n      /**\n       * When present, it specifies that the element should be disabled.\n       * @group Props\n       */\n      _defineProperty(this, \"disabled\", void 0);\n      /**\n       * Index of the element in tabbing order.\n       * @group Prop\n       */\n      _defineProperty(this, \"tabindex\", void 0);\n      /**\n       *  Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n       * @group Props\n       */\n      _defineProperty(this, \"appendTo\", void 0);\n      /**\n       * Indicates the direction of the element.\n       * @group Props\n       */\n      _defineProperty(this, \"dir\", void 0);\n      /**\n       * Defines a string that labels the expand button for accessibility.\n       * @group Props\n       */\n      _defineProperty(this, \"expandAriaLabel\", void 0);\n      /**\n       * Transition options of the show animation.\n       * @group Props\n       */\n      _defineProperty(this, \"showTransitionOptions\", '.12s cubic-bezier(0, 0, 0.2, 1)');\n      /**\n       * Transition options of the hide animation.\n       * @group Props\n       */\n      _defineProperty(this, \"hideTransitionOptions\", '.1s linear');\n      /**\n       * Callback to invoke when default command button is clicked.\n       * @param {MouseEvent} event - Mouse event.\n       * @group Emits\n       */\n      _defineProperty(this, \"onClick\", new EventEmitter());\n      /**\n       * Callback to invoke when dropdown button is clicked.\n       * @param {MouseEvent} event - Mouse event.\n       * @group Emits\n       */\n      _defineProperty(this, \"onDropdownClick\", new EventEmitter());\n      _defineProperty(this, \"containerViewChild\", void 0);\n      _defineProperty(this, \"buttonViewChild\", void 0);\n      _defineProperty(this, \"menu\", void 0);\n      _defineProperty(this, \"templates\", void 0);\n      _defineProperty(this, \"contentTemplate\", void 0);\n      _defineProperty(this, \"dropdownIconTemplate\", void 0);\n    }\n    ngAfterContentInit() {\n      this.templates?.forEach(item => {\n        switch (item.getType()) {\n          case 'content':\n            this.contentTemplate = item.template;\n            break;\n          case 'dropdownicon':\n            this.dropdownIconTemplate = item.template;\n            break;\n          default:\n            this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n    onDefaultButtonClick(event) {\n      this.onClick.emit(event);\n    }\n    onDropdownButtonClick(event) {\n      this.onDropdownClick.emit(event);\n      this.menu?.toggle({\n        currentTarget: this.containerViewChild?.nativeElement,\n        relativeAlign: this.appendTo == null\n      });\n    }\n  }\n  _defineProperty(SplitButton, \"\\u0275fac\", function SplitButton_Factory(t) {\n    return new (t || SplitButton)();\n  });\n  _defineProperty(SplitButton, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SplitButton,\n    selectors: [[\"p-splitButton\"]],\n    contentQueries: function SplitButton_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function SplitButton_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menu = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      model: \"model\",\n      icon: \"icon\",\n      iconPos: \"iconPos\",\n      label: \"label\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      menuStyle: \"menuStyle\",\n      menuStyleClass: \"menuStyleClass\",\n      disabled: \"disabled\",\n      tabindex: \"tabindex\",\n      appendTo: \"appendTo\",\n      dir: \"dir\",\n      expandAriaLabel: \"expandAriaLabel\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onDropdownClick: \"onDropdownClick\"\n    },\n    decls: 10,\n    vars: 18,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"container\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultButton\", \"\"], [\"type\", \"button\", \"pButton\", \"\", 1, \"p-splitbutton-menubutton\", \"p-button-icon-only\", 3, \"disabled\", \"click\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\"], [3, \"popup\", \"model\", \"styleClass\", \"appendTo\", \"showTransitionOptions\", \"hideTransitionOptions\"], [\"menu\", \"\"], [\"type\", \"button\", \"pButton\", \"\", 1, \"p-splitbutton-defaultbutton\", 3, \"icon\", \"iconPos\", \"disabled\", \"click\"], [\"type\", \"button\", \"pButton\", \"\", 1, \"p-splitbutton-defaultbutton\", 3, \"icon\", \"iconPos\", \"label\", \"disabled\", \"click\"], [\"defaultbtn\", \"\"]],\n    template: function SplitButton_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, SplitButton_ng_container_2_Template, 3, 5, \"ng-container\", 2);\n        i0.ɵɵtemplate(3, SplitButton_ng_template_3_Template, 2, 5, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function SplitButton_Template_button_click_5_listener($event) {\n          return ctx.onDropdownButtonClick($event);\n        });\n        i0.ɵɵtemplate(6, SplitButton_ChevronDownIcon_6_Template, 1, 0, \"ChevronDownIcon\", 5);\n        i0.ɵɵtemplate(7, SplitButton_7_Template, 1, 0, null, 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"p-tieredMenu\", 7, 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(4);\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", \"p-splitbutton p-component\")(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.contentTemplate)(\"ngIfElse\", _r2);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-label\", ctx.expandAriaLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.dropdownIconTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.dropdownIconTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMap(ctx.menuStyle);\n        i0.ɵɵproperty(\"popup\", true)(\"model\", ctx.model)(\"styleClass\", ctx.menuStyleClass)(\"appendTo\", ctx.appendTo)(\"showTransitionOptions\", ctx.showTransitionOptions)(\"hideTransitionOptions\", ctx.hideTransitionOptions);\n      }\n    },\n    dependencies: function () {\n      return [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i2.ButtonDirective, i3.TieredMenu, ChevronDownIcon];\n    },\n    styles: [\".p-splitbutton{display:inline-flex;position:relative}.p-splitbutton .p-splitbutton-defaultbutton,.p-splitbutton.p-button-rounded>.p-splitbutton-defaultbutton.p-button,.p-splitbutton.p-button-outlined>.p-splitbutton-defaultbutton.p-button{flex:1 1 auto;border-top-right-radius:0;border-bottom-right-radius:0;border-right:0 none}.p-splitbutton-menubutton,.p-splitbutton.p-button-rounded>.p-splitbutton-menubutton.p-button,.p-splitbutton.p-button-outlined>.p-splitbutton-menubutton.p-button{display:flex;align-items:center;justify-content:center;border-top-left-radius:0;border-bottom-left-radius:0}.p-splitbutton .p-menu{min-width:100%}.p-fluid .p-splitbutton{display:flex}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  }));\n  return SplitButton;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SplitButtonModule = /*#__PURE__*/(() => {\n  class SplitButtonModule {}\n  _defineProperty(SplitButtonModule, \"\\u0275fac\", function SplitButtonModule_Factory(t) {\n    return new (t || SplitButtonModule)();\n  });\n  _defineProperty(SplitButtonModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SplitButtonModule\n  }));\n  _defineProperty(SplitButtonModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, ButtonModule, TieredMenuModule, ChevronDownIcon, ButtonModule, TieredMenuModule]\n  }));\n  return SplitButtonModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SplitButton, SplitButtonModule };\n//# sourceMappingURL=primeng-splitbutton.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}