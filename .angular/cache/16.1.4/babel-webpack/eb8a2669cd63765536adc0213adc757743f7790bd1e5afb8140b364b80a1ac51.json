{"ast":null,"code":"import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, ChangeDetectorRef, Input, ViewChild, ContentChildren, Output, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { RippleModule } from 'primeng/ripple';\nimport { DomHandler } from 'primeng/dom';\nimport { PrimeTemplate } from 'primeng/api';\nclass Sidebar {\n  constructor(el, renderer, cd) {\n    this.el = el;\n    this.renderer = renderer;\n    this.cd = cd;\n    this.position = 'left';\n    this.blockScroll = false;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.modal = true;\n    this.dismissible = true;\n    this.showCloseIcon = true;\n    this.closeOnEscape = true;\n    this.onShow = new EventEmitter();\n    this.onHide = new EventEmitter();\n    this.visibleChange = new EventEmitter();\n  }\n  ngAfterViewInit() {\n    this.initialized = true;\n    if (this.appendTo) {\n      if (this.appendTo === 'body') document.body.appendChild(this.containerViewChild.nativeElement);else DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n    }\n    if (this.visible) {\n      this.show();\n    }\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'content':\n          this.contentTemplate = item.template;\n          break;\n        default:\n          this.contentTemplate = item.template;\n          break;\n      }\n    });\n  }\n  get visible() {\n    return this._visible;\n  }\n  set visible(val) {\n    this._visible = val;\n    if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\n      if (this._visible) this.show();else {\n        if (this.preventVisibleChangePropagation) this.preventVisibleChangePropagation = false;else this.hide();\n      }\n    }\n  }\n  ngAfterViewChecked() {\n    if (this.executePostDisplayActions) {\n      this.onShow.emit({});\n      this.executePostDisplayActions = false;\n    }\n  }\n  show() {\n    this.executePostDisplayActions = true;\n    if (this.autoZIndex) {\n      this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n    }\n    if (this.modal) {\n      this.enableModality();\n    }\n  }\n  hide() {\n    this.onHide.emit({});\n    if (this.modal) {\n      this.disableModality();\n    }\n  }\n  close(event) {\n    this.preventVisibleChangePropagation = true;\n    this.hide();\n    this.visibleChange.emit(false);\n    event.preventDefault();\n  }\n  enableModality() {\n    if (!this.mask) {\n      this.mask = document.createElement('div');\n      this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\n      DomHandler.addMultipleClasses(this.mask, 'p-component-overlay p-sidebar-mask');\n      if (this.dismissible) {\n        this.maskClickListener = this.renderer.listen(this.mask, 'click', event => {\n          if (this.dismissible) {\n            this.close(event);\n          }\n        });\n      }\n      document.body.appendChild(this.mask);\n      if (this.blockScroll) {\n        DomHandler.addClass(document.body, 'p-overflow-hidden');\n      }\n    }\n  }\n  disableModality() {\n    if (this.mask) {\n      this.unbindMaskClickListener();\n      document.body.removeChild(this.mask);\n      if (this.blockScroll) {\n        DomHandler.removeClass(document.body, 'p-overflow-hidden');\n      }\n      this.mask = null;\n    }\n  }\n  onAnimationStart(event) {\n    switch (event.toState) {\n      case 'visible':\n        if (this.closeOnEscape) {\n          this.bindDocumentEscapeListener();\n        }\n        break;\n      case 'hidden':\n        this.unbindGlobalListeners();\n        break;\n    }\n  }\n  bindDocumentEscapeListener() {\n    const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n    this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', event => {\n      if (event.which == 27) {\n        if (parseInt(this.containerViewChild.nativeElement.style.zIndex) === DomHandler.zindex + this.baseZIndex) {\n          this.close(event);\n        }\n      }\n    });\n  }\n  unbindDocumentEscapeListener() {\n    if (this.documentEscapeListener) {\n      this.documentEscapeListener();\n      this.documentEscapeListener = null;\n    }\n  }\n  unbindMaskClickListener() {\n    if (this.maskClickListener) {\n      this.maskClickListener();\n      this.maskClickListener = null;\n    }\n  }\n  unbindGlobalListeners() {\n    this.unbindMaskClickListener();\n    this.unbindDocumentEscapeListener();\n  }\n  ngOnDestroy() {\n    this.initialized = false;\n    if (this.visible) {\n      this.hide();\n    }\n    if (this.appendTo) {\n      this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n    }\n    this.unbindGlobalListeners();\n  }\n}\nclass SidebarModule {}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Sidebar, SidebarModule };\n//# sourceMappingURL=primeng-sidebar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}